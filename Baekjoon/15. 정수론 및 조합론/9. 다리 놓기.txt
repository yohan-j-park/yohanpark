import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;


public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        
        int caseNum = Integer.parseInt(br.readLine());
        int n, m, bridgeNum;
        for(int i = 0; i < caseNum; i++) {
            StringTokenizer st = new StringTokenizer(br.readLine());
            n = Integer.parseInt(st.nextToken());
            m = Integer.parseInt(st.nextToken());

            bridgeNum = combination(m, n);

            bw.write(bridgeNum + "\n");
        }

        bw.flush();
        bw.close();
        br.close();
    }

    static int[][] dp = new int[30][30];
    static int combination(int n, int r) {

        if(dp[n][r] > 0) {
            return dp[n][r];
        }

        if(r == 0 || n == r) {
            return dp[n][r] = 1;
        }

        return dp[n][r] = combination(n - 1, r - 1) + combination(n - 1, r);
    }
}